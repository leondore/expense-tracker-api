// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accounts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (name, description, account_number, category_id, institution_id, user_id, currency_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name
`

type CreateAccountParams struct {
	Name          string
	Description   sql.NullString
	AccountNumber sql.NullString
	CategoryID    int16
	InstitutionID sql.NullInt16
	UserID        uuid.UUID
	CurrencyID    int16
}

type CreateAccountRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Name,
		arg.Description,
		arg.AccountNumber,
		arg.CategoryID,
		arg.InstitutionID,
		arg.UserID,
		arg.CurrencyID,
	)
	var i CreateAccountRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec

DELETE FROM accounts
WHERE id = $1
AND user_id = $2
`

type DeleteAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, arg.ID, arg.UserID)
	return err
}

const listAccounts = `-- name: ListAccounts :many
SELECT
  a.id,
  a.name,
  a.balance,
  a.description,
  a.account_number,
  ac.id,
  ac.category,
  i.name,
  c.code
FROM accounts AS a
JOIN account_categories AS ac ON a.category_id = ac.id
JOIN institutions AS i ON a.institution_id = i.id
JOIN currencies AS c ON a.currency_id = c.id
WHERE a.user_id = $1
ORDER BY ac.id, a.name
`

type ListAccountsRow struct {
	ID            uuid.UUID
	Name          string
	Balance       string
	Description   sql.NullString
	AccountNumber sql.NullString
	ID_2          int16
	Category      AccountCategoryOptions
	Name_2        string
	Code          string
}

func (q *Queries) ListAccounts(ctx context.Context, userID uuid.UUID) ([]ListAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAccountsRow
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Balance,
			&i.Description,
			&i.AccountNumber,
			&i.ID_2,
			&i.Category,
			&i.Name_2,
			&i.Code,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAccount = `-- name: ReadAccount :one

SELECT
  a.id,
  a.name,
  a.balance,
  a.description,
  a.account_number,
  ac.id,
  ac.category,
  i.name,
  c.code
FROM accounts AS a
JOIN account_categories AS ac ON a.category_id = ac.id
JOIN institutions AS i ON a.institution_id = i.id
JOIN currencies AS c ON a.currency_id = c.id
WHERE a.id = $1
AND a.user_id = $2
`

type ReadAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

type ReadAccountRow struct {
	ID            uuid.UUID
	Name          string
	Balance       string
	Description   sql.NullString
	AccountNumber sql.NullString
	ID_2          int16
	Category      AccountCategoryOptions
	Name_2        string
	Code          string
}

func (q *Queries) ReadAccount(ctx context.Context, arg ReadAccountParams) (ReadAccountRow, error) {
	row := q.db.QueryRowContext(ctx, readAccount, arg.ID, arg.UserID)
	var i ReadAccountRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.Description,
		&i.AccountNumber,
		&i.ID_2,
		&i.Category,
		&i.Name_2,
		&i.Code,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one

UPDATE accounts
SET name = $2,
description = $3,
account_number = $4,
category_id = $5,
institution_id = $6,
currency_id = $7,
updated_at = NOW()
WHERE id = $1
AND user_id = $8
RETURNING id, name
`

type UpdateAccountParams struct {
	ID            uuid.UUID
	Name          string
	Description   sql.NullString
	AccountNumber sql.NullString
	CategoryID    int16
	InstitutionID sql.NullInt16
	CurrencyID    int16
	UserID        uuid.UUID
}

type UpdateAccountRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.AccountNumber,
		arg.CategoryID,
		arg.InstitutionID,
		arg.CurrencyID,
		arg.UserID,
	)
	var i UpdateAccountRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
