// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type AccountCategoryOptions string

const (
	AccountCategoryOptionsCash       AccountCategoryOptions = "cash"
	AccountCategoryOptionsBank       AccountCategoryOptions = "bank"
	AccountCategoryOptionsCreditCard AccountCategoryOptions = "creditCard"
	AccountCategoryOptionsDebitCard  AccountCategoryOptions = "debitCard"
	AccountCategoryOptionsInvestment AccountCategoryOptions = "investment"
	AccountCategoryOptionsLoan       AccountCategoryOptions = "loan"
	AccountCategoryOptionsOther      AccountCategoryOptions = "other"
)

func (e *AccountCategoryOptions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountCategoryOptions(s)
	case string:
		*e = AccountCategoryOptions(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountCategoryOptions: %T", src)
	}
	return nil
}

type NullAccountCategoryOptions struct {
	AccountCategoryOptions AccountCategoryOptions `json:"account_category_options"`
	Valid                  bool                   `json:"valid"` // Valid is true if AccountCategoryOptions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountCategoryOptions) Scan(value interface{}) error {
	if value == nil {
		ns.AccountCategoryOptions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountCategoryOptions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountCategoryOptions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountCategoryOptions), nil
}

type Account struct {
	ID            uuid.UUID      `json:"id"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	Name          string         `json:"name"`
	Balance       string         `json:"balance"`
	Description   sql.NullString `json:"description"`
	AccountNumber sql.NullString `json:"account_number"`
	CategoryID    int16          `json:"category_id"`
	InstitutionID sql.NullInt16  `json:"institution_id"`
	UserID        uuid.UUID      `json:"user_id"`
	CurrencyID    int16          `json:"currency_id"`
}

type AccountCategory struct {
	ID          int16                  `json:"id"`
	Category    AccountCategoryOptions `json:"category"`
	Description sql.NullString         `json:"description"`
}

type Attachment struct {
	ID        uuid.UUID    `json:"id"`
	CreatedAt sql.NullTime `json:"created_at"`
	Name      string       `json:"name"`
	UserID    uuid.UUID    `json:"user_id"`
}

type Country struct {
	ID   int16  `json:"id"`
	Name string `json:"name"`
	Code string `json:"code"`
}

type Currency struct {
	ID     int16  `json:"id"`
	Name   string `json:"name"`
	Code   string `json:"code"`
	Symbol string `json:"symbol"`
}

type Institution struct {
	ID        int16          `json:"id"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	Name      string         `json:"name"`
	Code      sql.NullString `json:"code"`
	CountryID int16          `json:"country_id"`
	LogoID    uuid.NullUUID  `json:"logo_id"`
	UserID    uuid.UUID      `json:"user_id"`
}

type Role struct {
	ID   int16  `json:"id"`
	Role string `json:"role"`
}

type User struct {
	ID            uuid.UUID    `json:"id"`
	CreatedAt     sql.NullTime `json:"created_at"`
	UpdatedAt     sql.NullTime `json:"updated_at"`
	Email         string       `json:"email"`
	Password      string       `json:"password"`
	RoleID        int16        `json:"role_id"`
	EmailVerified sql.NullBool `json:"email_verified"`
}
